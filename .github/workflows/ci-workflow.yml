name: "Continous Integration"

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "k8s/**"
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
    paths-ignore:
      - "k8s/**"

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      packages: write
      security-events: write
      pull-requests: write
      issues: write
      repository-projects: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
  
    name: "Continous Integration"

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "zulu"
          cache: maven
        
      - name: Restore maven dependencies from cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL static code analysis tool
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Build artifact and force snapshot updates with Maven
        run: |
          mvn -B package --file pom.xml -DskipTests

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

      - name: Deploy artifact to GitHub Packages
        run: |
          mvn --batch-mode deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_GITHUB_TOKEN }}

      - name: Get project version from pom.xml
        id: project_version
        run: |
          echo "::set-output name=PROJECT_VERSION::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"

      - name: Build and tag container image
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_ACR }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}
      - run: |
          docker build . -t ${{ secrets.AZURE_ACR }}/pfe-gitops-demo:${{ steps.project_version.outputs.PROJECT_VERSION }}
          docker image tag ${{ secrets.AZURE_ACR }}/pfe-gitops-demo:${{ steps.project_version.outputs.PROJECT_VERSION }} ${{ secrets.AZURE_ACR }}/pfe-gitops-demo:latest
          
      ### Scan images for vulnerabilities before pushing to ACR.
      - name: Scan container image for vulnerabilities
        uses: Azure/container-scan@v0
        with:
          image-name: ${{ secrets.AZURE_ACR }}/pfe-gitops-demo:${{ steps.project_version.outputs.PROJECT_VERSION }}
          severity-threshold: CRITICAL
          run-quality-checks: true
        continue-on-error: true
          
      - name: Push container image to ACR (Azure Container Registry)
        run: |
          docker push --all-tags ${{ secrets.AZURE_ACR }}/pfe-gitops-demo
      
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
      
      - name: Update app tag in k8s deployment file and set next app version
        run: |
          sed -i "s|image:.*|image: ${{ secrets.AZURE_ACR }}/pfe-gitops-demo:${{ steps.project_version.outputs.PROJECT_VERSION }}|g" k8s/app-deployment.yaml
          mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion} versions:commit
          
      - name: Push new k8s deployment tag into Git repo
        uses: GuillaumeFalourd/git-commit-push@v1.3
        with:
          email: ${{ github.actor }}@users.noreply.github.com
          name: ${{ github.actor }}
          commit_message: "[CI] Prepare app next version and set current version to ${{ steps.project_version.outputs.PROJECT_VERSION }}"
          files: k8s/app-deployment.yaml pom.xml 
          target_branch: main
          access_token: ${{ secrets.CI_PAT }}
          force: true
        
